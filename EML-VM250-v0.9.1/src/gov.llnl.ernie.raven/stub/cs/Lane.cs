// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gov/llnl/ernie/raven/proto/lane.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gov.Llnl.Ernie.Raven {

  /// <summary>Holder for reflection information generated from gov/llnl/ernie/raven/proto/lane.proto</summary>
  public static partial class LaneReflection {

    #region Descriptor
    /// <summary>File descriptor for gov/llnl/ernie/raven/proto/lane.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LaneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVnb3YvbGxubC9lcm5pZS9yYXZlbi9wcm90by9sYW5lLnByb3RvEhRnb3Yu",
            "bGxubC5lcm5pZS5yYXZlbiIkChFMYW5lRXJyb3JSZXNwb25zZRIPCgdtZXNz",
            "YWdlGAEgASgJIoYCChRMYW5lQ29uZmlndXJlUmVxdWVzdBIPCgdzaXRlX2lk",
            "GAEgASgFEg8KB2xhbmVfaWQYAiABKAUSEgoKY29sbGltYXRlZBgDIAEoCBIS",
            "CgpsYW5lX3dpZHRoGAQgASgBEhEKCWludGVydmFscxgFIAEoBRIOCgZob2xk",
            "aW4YBiABKAUSTgoKcHJvcGVydGllcxgHIAMoCzI6Lmdvdi5sbG5sLmVybmll",
            "LnJhdmVuLkxhbmVDb25maWd1cmVSZXF1ZXN0LlByb3BlcnRpZXNFbnRyeRox",
            "Cg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ASKhAQoVTGFuZUNvbmZpZ3VyZVJlc3BvbnNlEg8KB3ZlcnNpb24YASAB",
            "KAkSSAoHbWQ1X21hcBgCIAMoCzI3Lmdvdi5sbG5sLmVybmllLnJhdmVuLkxh",
            "bmVDb25maWd1cmVSZXNwb25zZS5NZDVNYXBFbnRyeRotCgtNZDVNYXBFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjwKFlByb2Nlc3NT",
            "Y2FuRGF0YVJlcXVlc3QSDwoHc2Nhbl9pZBgBIAEoBRIRCglzY2FuX2RhdGEY",
            "AiABKAkiPAoXUHJvY2Vzc1NjYW5EYXRhUmVzcG9uc2USDwoHc2Nhbl9pZBgB",
            "IAEoBRIQCgh4bWxfZGF0YRgCIAEoCUIiChRnb3YubGxubC5lcm5pZS5yYXZl",
            "bkIKTGFuZVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gov.Llnl.Ernie.Raven.LaneErrorResponse), global::Gov.Llnl.Ernie.Raven.LaneErrorResponse.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gov.Llnl.Ernie.Raven.LaneConfigureRequest), global::Gov.Llnl.Ernie.Raven.LaneConfigureRequest.Parser, new[]{ "SiteId", "LaneId", "Collimated", "LaneWidth", "Intervals", "Holdin", "Properties" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gov.Llnl.Ernie.Raven.LaneConfigureResponse), global::Gov.Llnl.Ernie.Raven.LaneConfigureResponse.Parser, new[]{ "Version", "Md5Map" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gov.Llnl.Ernie.Raven.ProcessScanDataRequest), global::Gov.Llnl.Ernie.Raven.ProcessScanDataRequest.Parser, new[]{ "ScanId", "ScanData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gov.Llnl.Ernie.Raven.ProcessScanDataResponse), global::Gov.Llnl.Ernie.Raven.ProcessScanDataResponse.Parser, new[]{ "ScanId", "XmlData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Response "Error"
  /// </summary>
  public sealed partial class LaneErrorResponse : pb::IMessage<LaneErrorResponse> {
    private static readonly pb::MessageParser<LaneErrorResponse> _parser = new pb::MessageParser<LaneErrorResponse>(() => new LaneErrorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneErrorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gov.Llnl.Ernie.Raven.LaneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneErrorResponse(LaneErrorResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneErrorResponse Clone() {
      return new LaneErrorResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneErrorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneErrorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneConfigureRequest : pb::IMessage<LaneConfigureRequest> {
    private static readonly pb::MessageParser<LaneConfigureRequest> _parser = new pb::MessageParser<LaneConfigureRequest>(() => new LaneConfigureRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneConfigureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gov.Llnl.Ernie.Raven.LaneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureRequest(LaneConfigureRequest other) : this() {
      siteId_ = other.siteId_;
      laneId_ = other.laneId_;
      collimated_ = other.collimated_;
      laneWidth_ = other.laneWidth_;
      intervals_ = other.intervals_;
      holdin_ = other.holdin_;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureRequest Clone() {
      return new LaneConfigureRequest(this);
    }

    /// <summary>Field number for the "site_id" field.</summary>
    public const int SiteIdFieldNumber = 1;
    private int siteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SiteId {
      get { return siteId_; }
      set {
        siteId_ = value;
      }
    }

    /// <summary>Field number for the "lane_id" field.</summary>
    public const int LaneIdFieldNumber = 2;
    private int laneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LaneId {
      get { return laneId_; }
      set {
        laneId_ = value;
      }
    }

    /// <summary>Field number for the "collimated" field.</summary>
    public const int CollimatedFieldNumber = 3;
    private bool collimated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Collimated {
      get { return collimated_; }
      set {
        collimated_ = value;
      }
    }

    /// <summary>Field number for the "lane_width" field.</summary>
    public const int LaneWidthFieldNumber = 4;
    private double laneWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LaneWidth {
      get { return laneWidth_; }
      set {
        laneWidth_ = value;
      }
    }

    /// <summary>Field number for the "intervals" field.</summary>
    public const int IntervalsFieldNumber = 5;
    private int intervals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Intervals {
      get { return intervals_; }
      set {
        intervals_ = value;
      }
    }

    /// <summary>Field number for the "holdin" field.</summary>
    public const int HoldinFieldNumber = 6;
    private int holdin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Holdin {
      get { return holdin_; }
      set {
        holdin_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneConfigureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneConfigureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SiteId != other.SiteId) return false;
      if (LaneId != other.LaneId) return false;
      if (Collimated != other.Collimated) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LaneWidth, other.LaneWidth)) return false;
      if (Intervals != other.Intervals) return false;
      if (Holdin != other.Holdin) return false;
      if (!Properties.Equals(other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SiteId != 0) hash ^= SiteId.GetHashCode();
      if (LaneId != 0) hash ^= LaneId.GetHashCode();
      if (Collimated != false) hash ^= Collimated.GetHashCode();
      if (LaneWidth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LaneWidth);
      if (Intervals != 0) hash ^= Intervals.GetHashCode();
      if (Holdin != 0) hash ^= Holdin.GetHashCode();
      hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SiteId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SiteId);
      }
      if (LaneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LaneId);
      }
      if (Collimated != false) {
        output.WriteRawTag(24);
        output.WriteBool(Collimated);
      }
      if (LaneWidth != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LaneWidth);
      }
      if (Intervals != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Intervals);
      }
      if (Holdin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Holdin);
      }
      properties_.WriteTo(output, _map_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SiteId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SiteId);
      }
      if (LaneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaneId);
      }
      if (Collimated != false) {
        size += 1 + 1;
      }
      if (LaneWidth != 0D) {
        size += 1 + 8;
      }
      if (Intervals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Intervals);
      }
      if (Holdin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Holdin);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneConfigureRequest other) {
      if (other == null) {
        return;
      }
      if (other.SiteId != 0) {
        SiteId = other.SiteId;
      }
      if (other.LaneId != 0) {
        LaneId = other.LaneId;
      }
      if (other.Collimated != false) {
        Collimated = other.Collimated;
      }
      if (other.LaneWidth != 0D) {
        LaneWidth = other.LaneWidth;
      }
      if (other.Intervals != 0) {
        Intervals = other.Intervals;
      }
      if (other.Holdin != 0) {
        Holdin = other.Holdin;
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SiteId = input.ReadInt32();
            break;
          }
          case 16: {
            LaneId = input.ReadInt32();
            break;
          }
          case 24: {
            Collimated = input.ReadBool();
            break;
          }
          case 33: {
            LaneWidth = input.ReadDouble();
            break;
          }
          case 40: {
            Intervals = input.ReadInt32();
            break;
          }
          case 48: {
            Holdin = input.ReadInt32();
            break;
          }
          case 58: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaneConfigureResponse : pb::IMessage<LaneConfigureResponse> {
    private static readonly pb::MessageParser<LaneConfigureResponse> _parser = new pb::MessageParser<LaneConfigureResponse>(() => new LaneConfigureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaneConfigureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gov.Llnl.Ernie.Raven.LaneReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureResponse(LaneConfigureResponse other) : this() {
      version_ = other.version_;
      md5Map_ = other.md5Map_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaneConfigureResponse Clone() {
      return new LaneConfigureResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// version string (ie. "4.0.0")
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "md5_map" field.</summary>
    public const int Md5MapFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_md5Map_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> md5Map_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of MD5 of the configuration files
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Md5Map {
      get { return md5Map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaneConfigureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaneConfigureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!Md5Map.Equals(other.Md5Map)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= Md5Map.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      md5Map_.WriteTo(output, _map_md5Map_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += md5Map_.CalculateSize(_map_md5Map_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaneConfigureResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      md5Map_.Add(other.md5Map_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            md5Map_.AddEntriesFrom(input, _map_md5Map_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcessScanDataRequest : pb::IMessage<ProcessScanDataRequest> {
    private static readonly pb::MessageParser<ProcessScanDataRequest> _parser = new pb::MessageParser<ProcessScanDataRequest>(() => new ProcessScanDataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessScanDataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gov.Llnl.Ernie.Raven.LaneReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataRequest(ProcessScanDataRequest other) : this() {
      scanId_ = other.scanId_;
      scanData_ = other.scanData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataRequest Clone() {
      return new ProcessScanDataRequest(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private int scanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanId {
      get { return scanId_; }
      set {
        scanId_ = value;
      }
    }

    /// <summary>Field number for the "scan_data" field.</summary>
    public const int ScanDataFieldNumber = 2;
    private string scanData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanData {
      get { return scanData_; }
      set {
        scanData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessScanDataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessScanDataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (ScanData != other.ScanData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId != 0) hash ^= ScanId.GetHashCode();
      if (ScanData.Length != 0) hash ^= ScanData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ScanId);
      }
      if (ScanData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ScanData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanId);
      }
      if (ScanData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessScanDataRequest other) {
      if (other == null) {
        return;
      }
      if (other.ScanId != 0) {
        ScanId = other.ScanId;
      }
      if (other.ScanData.Length != 0) {
        ScanData = other.ScanData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScanId = input.ReadInt32();
            break;
          }
          case 18: {
            ScanData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProcessScanDataResponse : pb::IMessage<ProcessScanDataResponse> {
    private static readonly pb::MessageParser<ProcessScanDataResponse> _parser = new pb::MessageParser<ProcessScanDataResponse>(() => new ProcessScanDataResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessScanDataResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gov.Llnl.Ernie.Raven.LaneReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataResponse(ProcessScanDataResponse other) : this() {
      scanId_ = other.scanId_;
      xmlData_ = other.xmlData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessScanDataResponse Clone() {
      return new ProcessScanDataResponse(this);
    }

    /// <summary>Field number for the "scan_id" field.</summary>
    public const int ScanIdFieldNumber = 1;
    private int scanId_;
    /// <summary>
    /// same as the request for auditing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScanId {
      get { return scanId_; }
      set {
        scanId_ = value;
      }
    }

    /// <summary>Field number for the "xml_data" field.</summary>
    public const int XmlDataFieldNumber = 2;
    private string xmlData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string XmlData {
      get { return xmlData_; }
      set {
        xmlData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessScanDataResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessScanDataResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanId != other.ScanId) return false;
      if (XmlData != other.XmlData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanId != 0) hash ^= ScanId.GetHashCode();
      if (XmlData.Length != 0) hash ^= XmlData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ScanId);
      }
      if (XmlData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(XmlData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanId);
      }
      if (XmlData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(XmlData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessScanDataResponse other) {
      if (other == null) {
        return;
      }
      if (other.ScanId != 0) {
        ScanId = other.ScanId;
      }
      if (other.XmlData.Length != 0) {
        XmlData = other.XmlData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ScanId = input.ReadInt32();
            break;
          }
          case 18: {
            XmlData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
